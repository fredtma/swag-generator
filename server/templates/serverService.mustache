'use strict';
require('colors');
var _             = require('lodash');
var commonService = require('../common/commonService');
{{#request}}
var requestAsync  = Promise.promisify(require('request'), {'multiArgs': true});
{{/request}}

var empty{{Replace}} = {
};

var $internals = {
  'getError': commonService.getError,
  'sculptObject': commonService.sculptObject,

  '{{replace}}MapCacheCollectionName': '{{replace}}MapCache',

  'getAuth': function() {
    return commonService.{{api}}.auth();
  },

  'basePath': function() {
    return commonService.{{api}}.basePath();
  },

  'searchPropertyMap': {
    'getId': _.property('{{replace}}Id'),
    'getName': _.property('name'),
    'getDateCreated': _.property('datecreated'),
    'getLastEdited': _.property('lastedited'),
    'get{{replace}}Type': _.property('type')
  },

  'orderByType': {
    'type': function orderByName({{replace}}) {
      return $internals.searchPropertyMap.get{{replace}}Type({{replace}}) || 'a';
    }
  },

  'sculpt{{Replace}}': function sculpt{{Replace}}({{replace}}) {
    {{replace}} = $internals.sculptObject({{replace}}, empty{{Replace}});
    return {{replace}};
  }
};

exports.config = {
  pathMap: {
    'get{{Replace}}': '{{&get}}',
    'lookup{{Replace}}': '{{&lookup}}',
    'save{{Replace}}': '{{&post}}'
  }
};

function commonRequest(url, options, method, body) {
  method = method  || 'get';

  var paramOptions = {
    'method': method,
    'url': url,
    'json': true,
    'auth': $internals.getAuth()
    {{#token}}
    ,'headers': commonService.commonHeaders(options)
    {{/token}}
  };

  let {query, mongoOptions} = commonService.buildQuery(options.params);
  if (query) {
    paramOptions.qs = query;
  }

  if (body) {
    paramOptions.body = body;
  }
  console.info('{{Replace}}Service %s - call [%s]'.gray, method, options.url || url);

  {{#gemStoneLocal}}
  return require('./{{replace}}GemStoneLocalService.js')(paramOptions, query, method);
  {{/gemStoneLocal}}
  {{#mongoLocal}}
  let mongo = global.mongo;
  if (!global.mongo) {
    let db    = require('../../database').mongoWrapper.currentDatabase;
    mongo = require('../../MongoUtil')('{{mongodb}}', db);
  }
  mongo.collection  = '{{mongodb}}';

  //modify the query here
  options.method = options.method || method;
  switch (options.method.toLowerCase()) {
    case 'get':
      return mongo.getItem(query, mongoOptions);
    case 'list':
      return mongo.getList(query, mongoOptions);
    case 'lookup':
      return mongo.getItem(query, mongoOptions);
    case 'post':
      return mongo.saveItem(body, mongoOptions);
    case 'post':
      return mongo.updateItem(query, body, mongoOptions);
  }
  {{/mongoLocal}}
  {{#empty}}
  return require('./{{replace}}EmptyService.js')(paramOptions, query, method);
  {{/empty}}
  {{#request}}
  return requestAsync(paramOptions)
    .spread(
      function get{{Replace}}SuccessHandler(response, body) {
        if (response.statusCode >= 400) {
          throw commonService.responseError('{{replace}}', response, body);
        }
        return body;
      },
      function get{{Replace}}FailedHandler(reason) {
        throw $internals.getError(reason);
      }
    );
  {{/request}}
}

{{#get}}
exports.getEmpty{{Replace}} = function getEmpty{{Replace}}() {
  return Promise.resolve($internals.sculpt{{Replace}}());
};

/**
 * Retrieve a single {{replace}}
 * method is called from the swagger api controller

 * @example
 * var options = {
 *   'params': request.swagger.params,
 *   'tokenContext': request.swagger.tokenContext
 * };
 * get{{Replace}}(options);
 * @param {object} options - variable passed from the controller
 * @param {object} options.tokenContext - the content on the token containing [brokerIdNumber, brokerHouseCode, brokerCode]
 * @param {object} options.params - the post content of the {{replace}}
 * @returns {promise}
 */
exports.get{{Replace}} = function get{{Replace}}(options) {
  var url = $internals.basePath() + exports.config.pathMap.get{{Replace}};
  return commonRequest(url, options, 'get');//You can transform the return value (promise)
};
{{/get}}
{{#list}}
/**
* Will get a collections of {{replace}}s

*/
exports.get{{Replace}}List = function get{{Replace}}(options) {
  var url = $internals.basePath() + exports.config.pathMap.get{{Replace}};
  options.method = 'list';
  return commonRequest(url, options);//You can transform the return value (promise)
};
{{/list}}
{{#lookup}}
/**
 * Retrieve a {{replace}}/s base upon the lookup
 * method is called from the swagger api controller

 * @example
 * var options = {
 *   'params': request.swagger.params,
 *   'tokenContext': request.swagger.tokenContext
 * };
 * get{{Replace}}(options);
 * @param {object} options - variable passed from the controller
 * @param {object} options.tokenContext - the content on the token containing [brokerIdNumber, brokerHouseCode, brokerCode]
 * @param {object} options.params - the post content of the {{replace}}
 * @returns {promise}
 */
exports.get{{Replace}}Lookup = function get{{Replace}}Lookup(options) {
  var url = $internals.basePath() + exports.config.pathMap.lookup{{Replace}};
  options.method = 'lookup';
  return commonRequest(url, options);//You can transform the return value (promise)
};

{{/lookup}}
{{#post}}
/**
 * method is called from the swagger api controller

 * @example
 * var options = {
 *    'tokenContext':{
 *    'brokerIdNumber': tokenContext.idnumber,
 *    'brokerHouseCode': tokenContext.brokerHouseCode,
 *    'brokerCode': tokenContext.brokerCode
 *  },
 *  'body': params.{{replace}}Detail.value
 * };
 * save{{Replace}}(options);
 * @param {object} options - variable passed from the controller
 * @param {object} options.tokenContext - the content on the token containing [brokerIdNumber, brokerHouseCode, brokerCode]
 * @param {object} options.body - the post content of the {{replace}}
 * @returns {promise}
 */
exports.save{{Replace}} = function save{{Replace}}(options) {
  var url = $internals.basePath() + exports.config.pathMap.save{{Replace}};
  return commonRequest(url, options, 'post', options.body);
};

{{/post}}